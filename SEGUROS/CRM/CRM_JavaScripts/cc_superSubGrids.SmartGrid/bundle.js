var pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./SmartGrid/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./SmartGrid/index.ts":
/*!****************************!*\
  !*** ./SmartGrid/index.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // Define const here\n\nvar RowRecordId = \"rowRecId\"; //list of common read only fields\n\nvar readOnly;\nreadOnly = ['createdby', 'createdonbehalfby', 'createdbyexternalparty', 'createdon', 'processid', 'statecode', 'statuscode']; // Style name of Load More Button\n\nvar LoadMoreButton_Hidden_Style = \"LoadMoreButton_Hidden_Style\";\n\nvar SmartGrid =\n/** @class */\nfunction () {\n  /**\r\n   * Empty constructor.\r\n   */\n  function SmartGrid() {}\n  /**\r\n   * Used to initialize the control instance. Controls can kick off remote server calls and other initialization actions here.\r\n   * Data-set values are not initialized here, use updateView.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to property names defined in the manifest, as well as utility functions.\r\n   * @param notifyOutputChanged A callback method to alert the framework that the control has new outputs ready to be retrieved asynchronously.\r\n   * @param state A piece of data that persists in one session for a single user. Can be set at any point in a controls life cycle by calling 'setControlState' in the Mode interface.\r\n   * @param container If a control is marked control-type='standard', it will receive an empty div element within which it can render its content.\r\n   */\n\n\n  SmartGrid.prototype.init = function (context, notifyOutputChanged, state, container) {\n    // Need to track container resize so that control could get the available width. The available height won't be provided even this is true\n    context.mode.trackContainerResize(true); // Create main table container div. \n\n    this.mainContainer = document.createElement(\"div\");\n    this.mainContainer.classList.add(\"SimpleTable_MainContainer_Style\"); // Create data table container div. \n\n    this.dataTable = document.createElement(\"table\");\n    this.dataTable.classList.add(\"SimpleTable_Table_Style\"); // Create data table container div. \n\n    this.loadPageButton = document.createElement(\"button\");\n    this.loadPageButton.setAttribute(\"type\", \"button\");\n    this.loadPageButton.innerText = context.resources.getString(\"PCF_TSTableGrid_LoadMore_ButtonLabel\");\n    this.loadPageButton.classList.add(LoadMoreButton_Hidden_Style);\n    this.loadPageButton.classList.add(\"LoadMoreButton_Style\");\n    this.loadPageButton.addEventListener(\"click\", this.onLoadMoreButtonClick.bind(this)); // Adding the main table and loadNextPage button created to the container DIV.\n\n    this.mainContainer.appendChild(this.dataTable);\n    this.mainContainer.appendChild(this.loadPageButton);\n    container.appendChild(this.mainContainer);\n  };\n  /**\r\n   * Called when any value in the property bag has changed. This includes field values, data-sets, global values such as container height and width, offline status, control metadata values such as label, visible, etc.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to names defined in the manifest, as well as utility functions\r\n   */\n\n\n  SmartGrid.prototype.updateView = function (context) {\n    this.contextObj = context;\n    this.toggleLoadMoreButtonWhenNeeded(context.parameters.smartGridDataSet);\n\n    if (!context.parameters.smartGridDataSet.loading) {\n      // Get sorted columns on View\n      var columnsOnView = this.getSortedColumnsOnView(context);\n\n      if (!columnsOnView || columnsOnView.length === 0) {\n        return;\n      }\n\n      var columnWidthDistribution = this.getColumnWidthDistribution(context, columnsOnView);\n\n      while (this.dataTable.firstChild) {\n        this.dataTable.removeChild(this.dataTable.firstChild);\n      }\n\n      this.dataTable.appendChild(this.createTableHeader(columnsOnView, columnWidthDistribution));\n      this.dataTable.appendChild(this.createTableBody(columnsOnView, columnWidthDistribution, context.parameters.smartGridDataSet));\n      this.dataTable.appendChild(this.createNewSection(columnsOnView, columnWidthDistribution));\n      this.dataTable.parentElement.style.height = window.innerHeight - this.dataTable.offsetTop - 70 + \"px\";\n    }\n  };\n  /**\r\n   * It is called by the framework prior to a control receiving new data.\r\n   * @returns an object based on nomenclature defined in manifest, expecting object[s] for property marked as “bound” or “output”\r\n   */\n\n\n  SmartGrid.prototype.getOutputs = function () {\n    return {};\n  };\n  /**\r\n   * Called when the control is to be removed from the DOM tree. Controls should use this call for cleanup.\r\n   * i.e. cancelling any pending remote calls, removing listeners, etc.\r\n   */\n\n\n  SmartGrid.prototype.destroy = function () {// Add code to cleanup control if necessary\n  };\n  /**\r\n   * Get sorted columns on view\r\n   * @param context\r\n   * @return sorted columns object on View\r\n   */\n\n\n  SmartGrid.prototype.getSortedColumnsOnView = function (context) {\n    if (!context.parameters.smartGridDataSet.columns) {\n      return [];\n    }\n\n    var columns = context.parameters.smartGridDataSet.columns.filter(function (columnItem) {\n      // some column are supplementary and their order is not > 0\n      return columnItem.order >= 0;\n    }); // Sort those columns so that they will be rendered in order\n\n    columns.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    return columns;\n  };\n  /**\r\n  * Get column width distribution\r\n  * @param context context object of this cycle\r\n  * @param columnsOnView columns array on the configured view\r\n  * @returns column width distribution\r\n  */\n\n\n  SmartGrid.prototype.getColumnWidthDistribution = function (context, columnsOnView) {\n    var widthDistribution = []; // Considering need to remove border & padding length\n\n    var totalWidth = context.mode.allocatedWidth - 250;\n    var widthSum = 0;\n    columnsOnView.forEach(function (columnItem) {\n      widthSum += columnItem.visualSizeFactor;\n    });\n    var remainWidth = totalWidth;\n    columnsOnView.forEach(function (item, index) {\n      var widthPerCell = \"\";\n\n      if (index !== columnsOnView.length - 1) {\n        var cellWidth = Math.round(item.visualSizeFactor / widthSum * totalWidth);\n        remainWidth = remainWidth - cellWidth;\n        widthPerCell = cellWidth + \"px\";\n      } else {\n        widthPerCell = remainWidth + \"px\";\n      }\n\n      widthDistribution.push(widthPerCell);\n    });\n    return widthDistribution;\n  };\n\n  SmartGrid.prototype.createTableHeader = function (columnsOnView, widthDistribution) {\n    var tableHeader = document.createElement(\"thead\");\n    var tableHeaderRow = document.createElement(\"tr\");\n    tableHeaderRow.classList.add(\"SimpleTable_TableRow_Style\");\n    columnsOnView.forEach(function (columnItem, index) {\n      var tableHeaderCell = document.createElement(\"th\");\n      tableHeaderCell.classList.add(\"SimpleTable_TableHeader_Style\");\n      var innerDiv = document.createElement(\"div\");\n      innerDiv.classList.add(\"SimpleTable_TableCellInnerDiv_Style\");\n      innerDiv.style.maxWidth = widthDistribution[index];\n      innerDiv.innerText = columnItem.displayName;\n      tableHeaderCell.appendChild(innerDiv);\n      tableHeaderRow.appendChild(tableHeaderCell);\n    });\n    tableHeader.appendChild(tableHeaderRow);\n    return tableHeader;\n  }; //section for create new \n\n\n  SmartGrid.prototype.createNewSection = function (columnsOnView, widthDistribution) {\n    var thisRef = this;\n    var filterContainer = document.createElement(\"div\");\n    filterContainer.classList.add(\"col-md-12\");\n    columnsOnView.forEach(function (columnItem, index) {\n      if (columnItem.dataType == \"OptionSet\") {\n        var _select_1;\n\n        _select_1 = document.createElement(\"select\");\n\n        _select_1.setAttribute(\"id\", \"in_\" + columnItem.name);\n\n        _select_1.setAttribute(\"name\", columnItem.dataType); // get optionset metadata\n\n\n        var req1 = new XMLHttpRequest();\n        req1.open(\"GET\", Xrm.Page.context.getClientUrl() + \"/api/data/v9.0/EntityDefinitions(LogicalName='\" + thisRef.contextObj.parameters.smartGridDataSet.getTargetEntityType() + \"')/Attributes(LogicalName='\" + columnItem.name + \"')/Microsoft.Dynamics.CRM.PicklistAttributeMetadata?$select=LogicalName&$expand=OptionSet($select=Options)\", false);\n        req1.setRequestHeader(\"OData-MaxVersion\", \"4.0\");\n        req1.setRequestHeader(\"OData-Version\", \"4.0\");\n        req1.setRequestHeader(\"Accept\", \"application/json\");\n        req1.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n        req1.setRequestHeader(\"Prefer\", \"odata.include-annotations=\\\"*\\\"\");\n\n        req1.onreadystatechange = function () {\n          if (this.readyState === 4) {\n            req1.onreadystatechange = null;\n\n            if (this.status === 200) {\n              var resultdata = JSON.parse(this.response);\n\n              if (resultdata.OptionSet != null && resultdata.OptionSet != \"\" && resultdata.OptionSet != \"undefined\") {\n                // @ts-ignore \n                resultdata.OptionSet.Options.forEach(function (option) {\n                  var optionitem = document.createElement(\"option\"); // @ts-ignore \n\n                  optionitem.value = option.Value; // @ts-ignore \n\n                  optionitem.text = option.Label.UserLocalizedLabel.Label; // @ts-ignore \n\n                  _select_1.add(optionitem);\n                });\n              }\n            } else {\n              alert(\"smartgrid:03: and error occured while getting entity metadata for options\" + this.statusText);\n            }\n          }\n        };\n\n        req1.send(); //retrived optionset medata\n\n        _select_1.classList.add(\"selectstyle\");\n\n        filterContainer.appendChild(_select_1);\n      } else if (columnItem.dataType == \"TwoOptions\") {\n        var innerCheckbox = document.createElement(\"input\");\n        innerCheckbox.setAttribute(\"id\", \"in_\" + columnItem.name);\n        innerCheckbox.setAttribute(\"type\", \"checkbox\");\n        innerCheckbox.setAttribute(\"name\", columnItem.dataType);\n        innerCheckbox.classList.add(\"box\");\n        innerCheckbox.checked = false;\n        var innerLabel = document.createElement(\"label\");\n        innerLabel.classList.add(\"Textbox_Style\");\n        innerLabel.setAttribute(\"for\", innerCheckbox.id);\n        innerLabel.innerHTML = columnItem.displayName;\n        innerLabel.setAttribute(\"name\", \"label_\" + columnItem.name);\n        filterContainer.appendChild(innerLabel);\n        filterContainer.appendChild(innerCheckbox);\n      } else {\n        var _Topic_1;\n\n        _Topic_1 = document.createElement(\"input\");\n\n        _Topic_1.setAttribute(\"id\", \"in_\" + columnItem.name);\n\n        _Topic_1.setAttribute(\"name\", columnItem.dataType);\n\n        _Topic_1.placeholder = columnItem.displayName;\n\n        _Topic_1.classList.add(\"Textbox_Style\");\n\n        _Topic_1.style.width = widthDistribution[index];\n        _Topic_1.style.display = \"inline-block\"; // lock if the field is non editable\n\n        if (readOnly.includes(columnItem.name)) {\n          _Topic_1.readOnly = true;\n\n          _Topic_1.classList.add(\"readonlyInput\");\n        }\n\n        if (columnItem.dataType.startsWith(\"Lookup\")) {\n          _Topic_1.readOnly = true;\n          _Topic_1.placeholder = \"Select \" + columnItem.displayName;\n          if (columnItem.name != thisRef.contextObj.parameters.primaryLookupName.raw && columnItem.dataType != \"Lookup.Customer\") _Topic_1.addEventListener(\"click\", function (e) {\n            return thisRef.openLookupDialogue(_Topic_1.id);\n          }); //Create a hidden field to capture lookup values\n\n          var recordGuid = void 0;\n          recordGuid = document.createElement(\"input\");\n          recordGuid.setAttribute(\"type\", \"hidden\");\n          recordGuid.setAttribute(\"id\", \"hd_in_\" + columnItem.name);\n          recordGuid.setAttribute(\"name\", columnItem.dataType);\n          filterContainer.appendChild(recordGuid);\n        } else if (columnItem.dataType.includes(\"DateAndTime\")) {\n          _Topic_1.setAttribute(\"type\", \"date\");\n        } else if (columnItem.dataType.includes(\"Decimal\")) {\n          _Topic_1.setAttribute(\"type\", \"number\");\n\n          _Topic_1.setAttribute(\"step\", \"1.00\");\n\n          _Topic_1.setAttribute(\"min\", \"0.00\");\n        } else if (columnItem.dataType.includes(\"Whole\")) {\n          _Topic_1.setAttribute(\"type\", \"number\");\n        } else {\n          _Topic_1.setAttribute(\"type\", \"text\");\n        }\n\n        filterContainer.appendChild(_Topic_1);\n      }\n    });\n    var addNew;\n    addNew = document.createElement(\"button\");\n    addNew.setAttribute(\"type\", \"button\");\n    addNew.innerText = \"+\";\n    addNew.classList.add(\"butn\");\n    addNew.classList.add(\"butn:hover\");\n    addNew.addEventListener(\"click\", this.addNewButtonClick.bind(this));\n    filterContainer.appendChild(addNew);\n    return filterContainer;\n  }; //\n\n\n  SmartGrid.prototype.createTableBody = function (columnsOnView, widthDistribution, gridParam) {\n    var tableBody = document.createElement(\"tbody\");\n\n    if (gridParam.sortedRecordIds.length > 0) {\n      var _loop_1 = function _loop_1(currentRecordId) {\n        var tableRecordRow = document.createElement(\"tr\");\n        tableRecordRow.classList.add(\"SimpleTable_TableRow_Style\");\n        tableRecordRow.addEventListener(\"click\", this_1.onRowClick.bind(this_1)); // Set the recordId on the row dom\n\n        tableRecordRow.setAttribute(RowRecordId, gridParam.records[currentRecordId].getRecordId());\n        columnsOnView.forEach(function (columnItem, index) {\n          var tableRecordCell = document.createElement(\"td\");\n          tableRecordCell.classList.add(\"SimpleTable_TableCell_Style\");\n          var innerDiv = document.createElement(\"div\");\n          innerDiv.classList.add(\"SimpleTable_TableCellInnerDiv_Style\");\n          innerDiv.style.maxWidth = widthDistribution[index];\n          innerDiv.innerText = gridParam.records[currentRecordId].getFormattedValue(columnItem.name);\n          tableRecordCell.appendChild(innerDiv);\n          tableRecordRow.appendChild(tableRecordCell);\n        });\n        tableBody.appendChild(tableRecordRow);\n      };\n\n      var this_1 = this;\n\n      for (var _i = 0, _a = gridParam.sortedRecordIds; _i < _a.length; _i++) {\n        var currentRecordId = _a[_i];\n\n        _loop_1(currentRecordId);\n      }\n    } else {\n      var tableRecordRow = document.createElement(\"tr\");\n      var tableRecordCell = document.createElement(\"td\");\n      tableRecordCell.classList.add(\"No_Record_Style\");\n      tableRecordCell.colSpan = columnsOnView.length;\n      tableRecordCell.innerText = this.contextObj.resources.getString(\"PCF_TSTableGrid_No_Record_Found\");\n      tableRecordRow.appendChild(tableRecordCell);\n      tableBody.appendChild(tableRecordRow);\n    }\n\n    return tableBody;\n  };\n  /**\r\n  * Row Click Event handler for the associated row when being clicked\r\n  * @param event\r\n  */\n\n\n  SmartGrid.prototype.onRowClick = function (event) {\n    var rowRecordId = event.currentTarget.getAttribute(RowRecordId);\n\n    if (rowRecordId) {\n      var gridEntity = this.contextObj.parameters.smartGridDataSet.getTargetEntityType().toString();\n      var entityReference = this.contextObj.parameters.smartGridDataSet.records[rowRecordId].getNamedReference();\n      var entityFormOptions = {\n        entityName: gridEntity,\n        entityId: entityReference.id.toString()\n      };\n      this.contextObj.navigation.openForm(entityFormOptions);\n    }\n  };\n  /**\r\n   * Toggle 'LoadMore' button when needed\r\n   */\n\n\n  SmartGrid.prototype.toggleLoadMoreButtonWhenNeeded = function (gridParam) {\n    if (gridParam.paging.hasNextPage && this.loadPageButton.classList.contains(LoadMoreButton_Hidden_Style)) {\n      this.loadPageButton.classList.remove(LoadMoreButton_Hidden_Style);\n    } else if (!gridParam.paging.hasNextPage && !this.loadPageButton.classList.contains(LoadMoreButton_Hidden_Style)) {\n      this.loadPageButton.classList.add(LoadMoreButton_Hidden_Style);\n    }\n  };\n  /**\r\n       * 'LoadMore' Button Event handler when load more button clicks\r\n       * @param event\r\n       */\n\n\n  SmartGrid.prototype.onLoadMoreButtonClick = function (event) {\n    this.contextObj.parameters.smartGridDataSet.paging.loadNextPage();\n    this.toggleLoadMoreButtonWhenNeeded(this.contextObj.parameters.smartGridDataSet);\n  };\n\n  SmartGrid.prototype.addNewButtonClick = function (event) {\n    var columnsOnView = this.getSortedColumnsOnView(this.contextObj);\n    var data = {};\n    var thisRef = this;\n    columnsOnView.forEach(function (columnItem, index) {\n      if (columnItem.dataType == \"OptionSet\") {\n        var fieldOptionSet = document.getElementById(\"in_\" + columnItem.name);\n        var selectedOption = fieldOptionSet.selectedIndex;\n        data[columnItem.name] = fieldOptionSet.options[selectedOption].value;\n      } else if (columnItem.dataType == \"Decimal\") {\n        var fieldDecimal = document.getElementById(\"in_\" + columnItem.name);\n\n        if (fieldDecimal.value != null && fieldDecimal.value != \"\" && fieldDecimal.value != \"undefined\") {\n          data[columnItem.name] = Number(fieldDecimal.value);\n        }\n      } else if (columnItem.dataType == \"TwoOptions\") {\n        var checkBox = document.getElementById(\"in_\" + columnItem.name);\n        data[columnItem.name] = checkBox.checked == true ? true : false; //in the onclick it's still the old value which is being switched\n      } else if (columnItem.dataType.startsWith(\"Lookup\") && columnItem.dataType != \"Lookup.Customer\") {\n        var field = document.getElementById(\"in_\" + columnItem.name);\n        var req = new XMLHttpRequest();\n        req.open(\"GET\", Xrm.Page.context.getClientUrl() + \"/api/data/v9.0/EntityDefinitions(LogicalName='\" + thisRef.contextObj.parameters.smartGridDataSet.getTargetEntityType() + \"')/Attributes(LogicalName='\" + columnItem.name + \"')\", false);\n        req.setRequestHeader(\"OData-MaxVersion\", \"4.0\");\n        req.setRequestHeader(\"OData-Version\", \"4.0\");\n        req.setRequestHeader(\"Accept\", \"application/json\");\n        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n        req.setRequestHeader(\"Prefer\", \"odata.include-annotations=\\\"*\\\"\");\n\n        req.onreadystatechange = function () {\n          if (this.readyState === 4) {\n            req.onreadystatechange = null;\n\n            if (this.status === 200) {\n              var result = JSON.parse(this.response);\n\n              if (result.Targets[0] != null && result.Targets[0] != \"\" && result.Targets[0] != \"undefined\") {\n                var targetName = result.Targets[0];\n                var schemaName_1 = result.LogicalName; //\tdata[schemaName+\"@odata.bind\"] = \"/\"+targetName+\"s(\" + thisRef.contextObj.page.entityId + \")\";\n\n                var req1 = new XMLHttpRequest();\n                req1.open(\"GET\", Xrm.Page.context.getClientUrl() + \"/api/data/v9.0/EntityDefinitions(LogicalName='\" + targetName + \"')\", false);\n                req1.setRequestHeader(\"OData-MaxVersion\", \"4.0\");\n                req1.setRequestHeader(\"OData-Version\", \"4.0\");\n                req1.setRequestHeader(\"Accept\", \"application/json\");\n                req1.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n                req1.setRequestHeader(\"Prefer\", \"odata.include-annotations=\\\"*\\\"\");\n\n                req1.onreadystatechange = function () {\n                  if (this.readyState === 4) {\n                    req1.onreadystatechange = null;\n\n                    if (this.status === 200) {\n                      var resultdata = JSON.parse(this.response);\n\n                      if (resultdata.EntitySetName != null && resultdata.EntitySetName != \"\" && resultdata.EntitySetName != \"undefined\") {\n                        var collectedGuidElement = document.getElementById(\"hd_in_\" + columnItem.name);\n\n                        if (collectedGuidElement.value != \"undefined\" && collectedGuidElement.value != null && collectedGuidElement.value != \"\") {\n                          var collectedGuid = collectedGuidElement.value;\n                          collectedGuid = collectedGuid.replace(\"{\", \"\");\n                          collectedGuid = collectedGuid.replace(\"}\", \"\");\n                          data[schemaName_1 + \"@odata.bind\"] = \"/\" + resultdata.EntitySetName + \"(\" + collectedGuid + \")\";\n                        }\n                      }\n                    } else {\n                      alert(\"smartgrid:03: and error occured while getting entity metadata for setting lookups\" + this.statusText);\n                    }\n                  }\n                };\n\n                req1.send(); //\n              }\n            } else {\n              alert(\"smartgrid:02: and error occured while getting entity metadata for setting lookups\" + this.statusText);\n            }\n          }\n        };\n\n        req.send();\n        field.value = \"\";\n      } else {\n        var fieldOthers = document.getElementById(\"in_\" + columnItem.name);\n\n        if (fieldOthers.value != null && fieldOthers.value != \"\" && fieldOthers.value != \"undefined\") {\n          data[columnItem.name] = fieldOthers.value;\n        }\n\n        fieldOthers.value = \"\";\n      }\n    });\n    var test = this.contextObj.parameters.smartGridDataSet.getTargetEntityType().toString(); // set the root relationship\n    // @ts-ignore \n\n    var primaryLookupschemaName = this.contextObj.parameters.primaryLookupName.raw.toString(); // @ts-ignore \n\n    var entitySetName = this.contextObj.parameters.primaryEntitySet.raw.toString(); // @ts-ignore \n\n    data[primaryLookupschemaName + \"@odata.bind\"] = \"/\" + entitySetName + \"(\" + this.contextObj.page.entityId + \")\";\n    var recordToCreate = this.contextObj.parameters.smartGridDataSet.getTargetEntityType().toString();\n    var targetEntityCollectionName = \"\"; //get target entityset name\n\n    var reqTargetCollection = new XMLHttpRequest();\n    reqTargetCollection.open(\"GET\", Xrm.Page.context.getClientUrl() + \"/api/data/v9.0/EntityDefinitions(LogicalName='\" + recordToCreate + \"')\", false);\n    reqTargetCollection.setRequestHeader(\"OData-MaxVersion\", \"4.0\");\n    reqTargetCollection.setRequestHeader(\"OData-Version\", \"4.0\");\n    reqTargetCollection.setRequestHeader(\"Accept\", \"application/json\");\n    reqTargetCollection.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n    reqTargetCollection.setRequestHeader(\"Prefer\", \"odata.include-annotations=\\\"*\\\"\");\n\n    reqTargetCollection.onreadystatechange = function () {\n      if (this.readyState === 4) {\n        reqTargetCollection.onreadystatechange = null;\n\n        if (this.status === 200) {\n          var resultdataTarget = JSON.parse(this.response);\n\n          if (resultdataTarget.EntitySetName != null && resultdataTarget.EntitySetName != \"\" && resultdataTarget.EntitySetName != \"undefined\") {\n            targetEntityCollectionName = resultdataTarget.EntitySetName;\n          }\n        } else {\n          alert(\"smartgrid:04: and error occured while getting entity metadata for target name\" + this.statusText);\n        }\n      }\n    };\n\n    reqTargetCollection.send(); //\n\n    var reqPost = new XMLHttpRequest();\n    reqPost.open(\"POST\", Xrm.Page.context.getClientUrl() + \"/api/data/v9.1/\" + targetEntityCollectionName, false);\n    reqPost.setRequestHeader(\"OData-MaxVersion\", \"4.0\");\n    reqPost.setRequestHeader(\"OData-Version\", \"4.0\");\n    reqPost.setRequestHeader(\"Accept\", \"application/json\");\n    reqPost.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\n    reqPost.onreadystatechange = function () {\n      if (this.readyState === 4) {\n        reqPost.onreadystatechange = null;\n\n        if (this.status === 204) {\n          var uri = this.getResponseHeader(\"OData-EntityId\"); //alert(\"New Item Added\");\n\n          thisRef.contextObj.navigation.openAlertDialog({\n            text: \"New \" + thisRef.contextObj.parameters.smartGridDataSet.getTargetEntityType() + \" Added\",\n            confirmButtonLabel: \"Okay\"\n          });\n          thisRef.contextObj.parameters.smartGridDataSet.refresh();\n        } else {\n          alert(\"An error occurred :(\" + this.statusText);\n          thisRef.contextObj.parameters.smartGridDataSet.refresh();\n        }\n      }\n    };\n\n    reqPost.send(JSON.stringify(data));\n    /* \t\tcommented standard method as this is not working for all cases.\r\n    this.contextObj.webAPI.createRecord(recordToCreate, data).then(function (response: ComponentFramework.EntityReference) {\r\n        let id: string = response.id.toString();\r\n      alert(\"New Item Added\");\r\n      thisRef.contextObj.parameters.smartGridDataSet.refresh();\r\n    }, function (errorResponse: any) {\r\n      alert(errorResponse);\r\n      thisRef.contextObj.parameters.smartGridDataSet.refresh();\r\n    });  */\n  };\n\n  SmartGrid.prototype.openLookupDialogue = function (fieldID) {\n    var targetName; // get target entity\n\n    var thisRef = this;\n    var req = new XMLHttpRequest();\n    req.open(\"GET\", Xrm.Page.context.getClientUrl() + \"/api/data/v9.0/EntityDefinitions(LogicalName='\" + this.contextObj.parameters.smartGridDataSet.getTargetEntityType() + \"')/Attributes(LogicalName='\" + fieldID.slice(3) + \"')\", false);\n    req.setRequestHeader(\"OData-MaxVersion\", \"4.0\");\n    req.setRequestHeader(\"OData-Version\", \"4.0\");\n    req.setRequestHeader(\"Accept\", \"application/json\");\n    req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n    req.setRequestHeader(\"Prefer\", \"odata.include-annotations=\\\"*\\\"\");\n\n    req.onreadystatechange = function () {\n      if (this.readyState === 4) {\n        req.onreadystatechange = null;\n\n        if (this.status === 200) {\n          var result = JSON.parse(this.response);\n\n          if (result.Targets[0] !== null && result.Targets[0] !== \"\" && result.Targets[0] !== \"undefined\") {\n            targetName = result.Targets[0];\n            var lookUpOptions = {\n              entityTypes: [targetName]\n            };\n            var lookUpPromise = thisRef.contextObj.utils.lookupObjects(lookUpOptions);\n            lookUpPromise.then( // Callback method - invoked after user has selected an item from the lookup dialog\n            // Data parameter is the item selected in the lookup dialog\n            function (data) {\n              if (data && data[0]) {\n                // Get the ID and entityType of the record selected by the lookup\n                var id = data[0].id;\n                var entityType = data[0].etn; // set the text box with details\n\n                var currentField = document.getElementById(fieldID);\n                currentField.value = data[0].name; // set lookup details to  hidden fields\n\n                var lookupHiddenValue = document.getElementById(\"hd_\" + fieldID);\n                lookupHiddenValue.value = id;\n              }\n            }, function (error) {// Error handling code here\n            });\n          }\n        } else {\n          alert(\"smartgrid:01: and error occured while getting entity metadata\" + this.statusText);\n        }\n      }\n    };\n\n    req.send(); //\n  };\n\n  return SmartGrid;\n}();\n\nexports.SmartGrid = SmartGrid;\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./SmartGrid/index.ts?");

/***/ })

/******/ });
if (window.ComponentFramework && window.ComponentFramework.registerControl) {
	ComponentFramework.registerControl('superSubGrids.SmartGrid', pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.SmartGrid);
} else {
	var superSubGrids = superSubGrids || {};
	superSubGrids.SmartGrid = pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.SmartGrid;
	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = undefined;
}