if ("undefined" != typeof RTEjSanity) throw "RTEjSanity has been defined, please check if there's any duplicate reference."; RTEjSanity = {}, function (t) { "use strict"; var e = { inputString: "", maxWidth: "600px", maxHeight: "200px", overflow: "hidden", allowLinks: !0, linkClickCallback: null, customProtocols: {}, allowRelativeURLs: !1, allowAudioVideo: !1, validPropertyRegularExpression: new RegExp("^[a-zA-Z0-9_().-/:?&$%=]*"), externalContentCallback: function (t, e, r, o) { var i; if ("attribute" === t && ("src" === e || "href" === e)) for (var n in o) if (o.hasOwnProperty(n) && r.substring(0, n.length) === n && this.validPropertyRegularExpression.test(r)) { i = !0; break } return i || (r = "CSSURL" === t ? 'url("about:blank")' : "about:blank"), r }, isolatedTargetDOM: !1, directModifySource: !0, attributePrefix: "jSanity", dataAttributeCallback: null, tagCallback: null, debugLevel: 0, onFinishedCallback: null }, r = function () { this.sync = !0, this.jobs = [], this.id = r.globalId++ , this.listnerPosfix = 0, this.onCompletedListners = {}, this.onNewJobAddedListners = {}, this.useSync = function () { this.sync = !0 }, this.useAsync = function () { this.sync = !1 }, this.addNewJob = function (t) { for (var e in this.jobs.push(t), this.onNewJobAddedListners) if (this.onNewJobAddedListners.hasOwnProperty(e)) try { this.onNewJobAddedListners[e](t) } catch (t) { } }, this.registerOnJobCompleted = function (t) { var e; return this.listnerPosfix += 1, e = this.id.toString() + this.listnerPosfix.toString(), this.onCompletedListners[e] = t, e }, this.registerOnNewJobAdded = function (t) { var e; return this.listnerPosfix += 1, e = this.id.toString() + this.listnerPosfix.toString(), this.onNewJobAddedListners[e] = t, e }, this.unRegisterListner = function (t) { this.onCompletedListners[t] ? delete this.onCompletedListners[t] : this.onNewJobAddedListners[t] && delete this.onNewJobAddedListners[t] }, this.run = function () { var t, e, o, i, n = null, a = this.sync; t = (new Date).getTime(); do { if (n = this.jobs.pop()) try { n() } catch (t) { } else for (var l in this.onCompletedListners) if (this.onCompletedListners.hasOwnProperty(l)) try { this.onCompletedListners[l]() } catch (t) { } e = (new Date).getTime(), n && !this.sync && (a = e - t < r.maxExecutionTimeForMergedAsyncJobs) } while (a && n); if (!this.sync && n) { var s = (o = this.run, i = this, function () { o.apply(i) }); setTimeout(s, 0) } } }; r.globalId = 0, r.maxExecutionTimeForMergedAsyncJobs = 15; var o = function (t, r) { var o = new t; r.onFinishedCallback ? o.useAsync() : o.useSync(); var i, n, a, l, s, d = { default: { knownElements: { html: 1, style: 1, noscript: 1, body: 1, section: 1, nav: 1, article: 1, aside: 1, h1: 1, h2: 1, h3: 1, h4: 1, h5: 1, h6: 1, hgroup: 1, header: 1, footer: 1, address: 1, main: 1, p: 1, hr: 1, pre: 1, blockquote: 1, ol: 1, ul: 1, li: 1, dl: 1, dt: 1, dd: 1, figure: 1, figcaption: 1, div: 1, a: 1, em: 1, strong: 1, small: 1, s: 1, cite: 1, q: 1, dfn: 1, abbr: 1, code: 1, var: 1, samp: 1, kbd: 1, sub: 1, sup: 1, i: 1, b: 1, u: 1, mark: 1, ruby: 1, rt: 1, rp: 1, bdi: 1, bdo: 1, span: 1, br: 1, wbr: 1, big: 1, tt: 1, ins: 1, del: 1, img: 1, video: 1, audio: 1, source: 1, map: 1, area: 1, svg: 1, math: 1, table: 1, caption: 1, colgroup: 1, col: 1, tbody: 1, thead: 1, tfoot: 1, tr: 1, td: 1, th: 1, input: 1, button: 1, select: 1, datalist: 1, optgroup: 1, option: 1, textarea: 1, progress: 1, meter: 1, details: 1, summary: 1, command: 1, menu: 1, center: 1, font: 1, class: 1, label: 1, link: 1, form: 1, legend: 1, fieldset: 1 }, knownAttributes: { class: 1, contenteditable: 1, dir: 1, hidden: 1, id: 1, lang: 1, spellcheck: 1, tabindex: 1, title: 1, cite: 1, reversed: 1, start: 1, value: 1, href: 1, hreflang: 1, rel: 1, datetime: 1, alt: 1, height: 1, ismap: 1, src: 1, width: 1, usemap: 1, autoplay: 1, controls: 1, loop: 1, muted: 1, preload: 1, coords: 1, shape: 1, span: 1, colspan: 1, headers: 1, rowspan: 1, scope: 1, checked: 1, disabled: 1, max: 1, maxlength: 1, min: 1, name: 1, placeholder: 1, readonly: 1, selectiondirection: 1, size: 1, step: 1, selectedindex: 1, label: 1, selected: 1, cols: 1, rows: 1, selectionend: 1, selectionstart: 1, wrap: 1, low: 1, high: 1, optimum: 1, open: 1, align: 1, face: 1, hspace: 1, vspace: 1, border: 1, cellpadding: 1, cellspacing: 1, "font-variant-caps": 1, "font-variant-numeric": 1, valign: 1, halign: 1, bgcolor: 1, background: 1, for: 1, type: 1, required: 1, "aria-role": 1, "aria-label": 1, list: 1, loading: 1 } }, "http://www.w3.org/2000/svg": { knownElements: { circle: 1 }, knownAttributes: { cx: 1, cy: 1, r: 1, stroke: 1, "stroke-width": 1, fill: 1 } } }, c = { "http://": 1, "https://": 1, "mailto:": 1 }, u = { "background-attachment": 1, "background-color": 1, "background-image": 1, "background-position": 1, "background-position-y": 1, "background-position-x": 1, "background-repeat": 1, "background-repeat-y": 1, "background-repeat-x": 1, "background-clip": 1, "background-origin": 1, "background-size": 1, border: 1, "border-bottom": 1, "border-bottom-color": 1, "border-bottom-style": 1, "border-bottom-width": 1, "border-color": 1, "border-left": 1, "border-left-color": 1, "border-left-style": 1, "border-left-width": 1, "border-right": 1, "border-right-color": 1, "border-right-style": 1, "border-right-width": 1, "border-style": 1, "border-top": 1, "border-top-color": 1, "border-top-style": 1, "border-top-width": 1, "border-width": 1, outline: 1, "outline-color": 1, "outline-style": 1, "outline-width": 1, "border-bottom-left-radius": 1, "border-bottom-right-radius": 1, "border-radius": 1, "border-top-left-radius": 1, "border-top-right-radius": 1, "box-decoration-break": 1, "box-shadow": 1, "overflow-x": 1, "overflow-y": 1, "overflow-style": 1, rotation: 1, "rotation-point": 1, opacity: 1, height: 1, "max-height": 1, "max-width": 1, "min-height": 1, "min-width": 1, width: 1, "box-align": 1, "box-direction": 1, "box-flex": 1, "box-flex-group": 1, "box-lines": 1, "box-ordinal-group": 1, "box-orient": 1, "box-pack": 1, font: 1, "font-family": 1, "font-size": 1, "font-style": 1, "font-variant": 1, "font-weight": 1, "font-size-adjust": 1, "font-stretch": 1, "grid-columns": 1, "grid-rows": 1, margin: 1, "margin-bottom": 1, "margin-left": 1, "margin-right": 1, "margin-top": 1, "column-count": 1, "column-fill": 1, "column-gap": 1, "column-rule": 1, "column-rule-color": 1, "column-rule-style": 1, "column-rule-width": 1, "column-span": 1, "column-width": 1, columns: 1, padding: 1, "padding-bottom": 1, "padding-left": 1, "padding-right": 1, "padding-top": 1, bottom: 1, clear: 1, clip: 1, display: 1, float: 1, left: 1, overflow: 1, position: 1, right: 1, top: 1, visibility: 1, "z-index": 1, "border-collapse": 1, "border-spacing": 1, "caption-side": 1, "empty-cells": 1, "table-layout": 1, color: 1, direction: 1, "letter-spacing": 1, "line-height": 1, "text-align": 1, "text-decoration": 1, "text-decoration-color": 1, "text-decoration-line": 1, "text-decoration-style": 1, "text-decoration-thickness": 1, "text-indent": 1, "text-transform": 1, "unicode-bidi": 1, "vertical-align": 1, "white-space": 1, "word-spacing": 1, "hanging-punctuation": 1, "punctuation-trim": 1, "text-align-last": 1, "text-justify": 1, "text-outline": 1, "text-shadow": 1, "text-wrap": 1, "word-break": 1, "word-wrap": 1 }, b = [], p = []; function h(t, e) { window.console && n.debugLevel >= t && console.log("jSanity: " + e) } function f(t, e, r) { return function () { var o = i.currentNode; i.currentNode = t, function (t, e) { var r, o, s, f, g, y, w, k, v, x; r = i.currentNode; for (var C, S, A, M, L = new Array, N = i.firstChild(); null !== N; N = i.nextSibling())switch (N.nodeType) { case N.ELEMENT_NODE: if ((s = N.tagName.toLowerCase()) in d[t].knownElements || null !== n.tagCallback && n.tagCallback(s)) { if (f = t, "svg" === s && (t = "http://www.w3.org/2000/svg"), o = n.directModifySource ? N : "default" == t ? l.createElement(s) : l.createElementNS(t, s), g = !1, n.allowAudioVideo || "video" !== s && "audio" !== s && "source" !== s || (g = !0), M = null, "form" === s && (M = "jSanityReturnFalseCallback"), !g) { C = null, N.attributes instanceof NamedNodeMap && "function" == typeof N.removeAttribute && "function" == typeof N.setAttribute || L.push(N); for (var P = 0; P < N.attributes.length; P++)if ((x = N.attributes[P].name.toLowerCase()) in d[t].knownAttributes) if ("href" === x) { if (y = !1, n.allowLinks) for (var E in c) if (c.hasOwnProperty(E) && N.attributes[P].value.substring(0, E.length) === E) { y = n.validPropertyRegularExpression.test(N.attributes[P].value), o.setAttribute("href", N.attributes[P].value), null !== n.linkClickCallback && (C = "/*jSanityClickCallback*/"); break } y || (C = "/*jSanityReturnFalseCallback*/") } else if ("class" === x) n.directModifySource; else if ("name" === x || "id" === x) w = n.attributePrefix + "_", void 0 !== a && (w += a + "_"), N.attributes[P].value.length > 0 && (N.attributes[P].value.length > w.length && N.attributes[P].value.substring(0, w.length) === w ? o.setAttribute(N.attributes[P].name, N.attributes[P].value) : o.setAttribute(N.attributes[P].name, w + N.attributes[P].value)); else if ("src" === x) { if (k = N.attributes[P].value, null !== n.externalContentCallback && (k = n.externalContentCallback("attribute", "src", k, c)), null === k) { g = !0; break } o.setAttribute("src", k) } else o.setAttribute(N.attributes[P].name, N.attributes[P].value); else if (null !== n.dataAttributeCallback && "data-" === x.substring(0, 5)) if (null !== (v = n.dataAttributeCallback(N.attributes[P].name, N.attributes[P].value))) try { o.setAttribute(N.attributes[P].name, v) } catch (t) { h(0, "Unable to set attribute: " + N.attributes[P].name + " to " + v) } else n.directModifySource && (N.removeAttribute(N.attributes[P].name), P--), h(1, "Encountered unsupported attribute: " + x); else n.directModifySource && "style" !== x && (N.removeAttribute(N.attributes[P].name), P--), h(1, "Encountered unsupported attribute: " + x); C && ("/*jSanityReturnFalseCallback*/" === C && o.setAttribute("href", "#"), o.setAttribute("onclick", C), b.push(o)), M && (o.setAttribute("onsubmit", M), p.push(o)) } if (!g && N.style) for (var P = 0; P < N.style.length; P++)if ((A = N.style[P]) in u) { S = !1, "url(" === (k = N.style.getPropertyValue(A)).substring(0, 4) && null !== n.externalContentCallback && (k = n.externalContentCallback("CSSURL", A, k, c), S = !0), "position" === A && "static" !== k && "relative" !== k && "inherit" !== k && (k = "inherit", S = !0); try { n.directModifySource ? S && o.style.setProperty(A, k) : o.style.setProperty(A, k) } catch (t) { h(0, "Unable to set CSS property: " + A) } } else n.directModifySource && o.style.setProperty(A, null), h(1, "Encountered unsupported style property: " + A); g ? n.directModifySource && L.push(N) : n.directModifySource || e.appendChild(o), g || m(N, t, o), t = f } else n.directModifySource && L.push(N), h(1, "Encountered unsupported element: " + s); break; case N.TEXT_NODE: n.directModifySource || (o = l.createTextNode(N.nodeValue), e.appendChild(o)); break; case N.COMMENT_NODE: break; default: n.directModifySource && L.push(N), h(1, "Unknown node type: " + N.nodeType) }for (P = 0; P < L.length; P++)try { L[P].removeNode(!0) } catch (t) { try { L[P].remove() } catch (t) { L[P].parentNode.removeChild(L[P]) } } i.currentNode = r }(e, r), i.currentNode = o } } function m(t, e, r) { var i = f(t, e, r); o.addNewJob(i) } function g(t) { if (!t) throw "invalid number of parameters. At least one is expected"; if ("[object Object]" != t.toString()) throw "Invalid type of parameter"; for (var e = 0, r = null; e < arguments.length; e++) { if ("[object Object]" != (r = arguments[e]).toString()) throw "Invalid type of parameter"; for (var o in r) r.hasOwnProperty(o) && (t[o] = r[o]) } return t } function y(t) { return Object.getOwnPropertyDescriptor(Document.prototype, "body") ? Object.getOwnPropertyDescriptor(Document.prototype, "body").get.call(t) : Object.getOwnPropertyDescriptor(document.__proto__, "body").get.call(t) } this.sanitizeMethod = function (t) { var r, a, d, u, h, f; n = g({}, e, t), g(c, n.customProtocols), n.isolatedTargetDOM ? (n.directModifySource = !1, l = document.implementation.createHTMLDocument("destDoc")) : (n.directModifySource = !0, r = document.createElement("span"), l = document), s = document.implementation.createHTMLDocument("sourceDoc"), (a = s.createElement("span")).innerHTML = n.inputString, y(s).appendChild(a), s.createTreeWalker !== Document.prototype.createTreeWalker && (s = document.implementation.createHTMLDocument("sourceDoc"), a = s.createElement("span"), s.body.appendChild(a)), m((i = s.createTreeWalker(y(s), NodeFilter.SHOW_ALL, null, !1)).currentNode, "default", n.isolatedTargetDOM ? l.body : r); var w = o.registerOnJobCompleted(function () { if (n.isolatedTargetDOM) { var t = document.importNode(l.documentElement, !0); d = t.lastChild.firstChild } else d = n.directModifySource ? a : r; for (u = 0; u < b.length; u++)h = b[u], "/*RTEjSanityClickCallback*/" === (f = h.getAttribute("onclick")) ? (h.removeAttribute("onclick"), h.onclick = function () { return n.linkClickCallback() }) : "/*jSanityReturnFalseCallback*/" === f && (h.removeAttribute("onclick"), h.onclick = function () { return !1 }); for (u = 0; u < p.length; u++)(h = p[u]).removeAttribute("onsubmit"), h.onsubmit = function () { return !1 }; try { d.style.setProperty("display", "inline-block"), n.maxWidth && d.style.setProperty("max-width", n.maxWidth), n.maxHeight && d.style.setProperty("max-height", n.maxHeight), n.overflow && d.style.setProperty("overflow", n.overflow) } catch (t) { } b = [], o.unRegisterListner(w), n.onFinishedCallback && n.onFinishedCallback(d) }); return o.run(), d } }, i = !(void 0 !== document.documentMode && document.documentMode < 10); t.isSupport = function () { return i }, t.sanitize = function (t) { if (!i) throw "jSanity does not support run in current browser version."; return new o(r, t).sanitizeMethod(t) } }(RTEjSanity);